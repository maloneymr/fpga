import resetter;
import uart;
import spi;
import picorv32;
import edge;
import memory;

union type Valid {
    Invalid();
    Valid(payload : Word[8]);
}

fn led_color(leds : color::Color, is_trapped : Bit, counter : Word[22]) -> color::Color {
    if is_trapped {
        $color::Color { red = counter[21], blue = false, green = false }
    } else {
        leds
    }
}

mod Top {
    incoming clock : Clock;

    outgoing led_red : Bit;
    outgoing led_green : Bit;
    outgoing led_blue : Bit;

    reg led_counter : Word[22] on clock;
    led_counter <=
        if reset {
            0
        } else {
            led_counter->inc()
        };

    wire led_color : color::Color;
    led_color := led_color(memory_subsystem.leds, core.trap, led_counter);

    led_red := led_color->red->not();
    led_green := led_color->green->not();
    led_blue := led_color->blue->not();

    mod resetter of resetter::Resetter;
    resetter.clock := clock;

    wire reset : Bit;
    reset := resetter.out;

    master socket spi of spi::Spi;
    master socket uart of uart::Uart;

    uart :=: memory_subsystem.uart;

    mod core of picorv32::PicoRv32;
    core.clock := clock;
    core.reset := reset;

    mod memory_subsystem of memory::MemorySubsystem;
    memory_subsystem.clock := clock;
    memory_subsystem.reset := reset;

    memory_subsystem.mem :=: core.mem;
    spi :=: memory_subsystem.spi;

    mod edge_detector of edge::Edge;
    edge_detector.clock := clock;
    edge_detector.inp := spi.di;
}
