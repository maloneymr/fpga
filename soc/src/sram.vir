mod Ram {
    incoming clock : Clock;
    incoming reset : Bit;
    incoming addr : Word[14];
    incoming write_enable : Bit;
    incoming read_enable : Bit;
    incoming write_mask : Word[4];
    incoming data_inp : Word[32];
    outgoing data_out : Word[32];
    outgoing ready : Bit;

    reg is_reading : Bit on clock;
    is_reading <=
        if reset {
            false
        } else if state->eq(0)->and(read_enable) {
            true
        } else if state == 3 {
            false
        } else {
            is_reading
        };

    reg state : Word[2] on clock;
    state <=
        if reset {
            0
        } else if state->gt(0) {
            state->inc()
        } else if read_enable->or(write_enable) {
            1
        } else {
            state
        };

    mod sram_hi of SRam;
    mod sram_lo of SRam;
    sram_hi.clock := clock;
    sram_lo.clock := clock;

    sram_hi.write_mask := write_mask;
    sram_lo.write_mask := write_mask;

    sram_hi.write_enable := reset->not()->and(write_enable)->and(state == 0);
    sram_lo.write_enable := reset->not()->and(write_enable)->and(state == 0);

    sram_hi.addr := addr;
    sram_lo.addr := addr;

    sram_hi.data_inp := data_inp[32..16];
    sram_lo.data_inp := data_inp[16..0];

    data_out :=
        if is_reading->and(state == 3) {
            word(sram_hi.data_out, sram_lo.data_out)
        } else {
            0
        };

    ready := state == 3;
}

ext mod SRam {
    incoming clock : Clock;
    incoming addr : Word[14];
    incoming write_enable : Bit;
    incoming write_mask : Word[4];
    incoming data_inp : Word[16];
    outgoing data_out : Word[16];
}
